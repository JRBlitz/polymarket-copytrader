version: '3.8'

services:
  # High-Performance Copy Trading Backend
  copytrader-backend:
    build:
      context: .
      target: development
    ports:
      - "3001:3001"
      - "9090:9090"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - HOST=0.0.0.0
      - LOG_LEVEL=debug
      - DEBUG=true
      - DRY_RUN=true
    volumes:
      - ./src:/app/src
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres
    networks:
      - copytrader-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - copytrader-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=copytrader
      - POSTGRES_USER=copytrader
      - POSTGRES_PASSWORD=copytrader123
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - copytrader-network
    restart: unless-stopped

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - copytrader-network
    restart: unless-stopped

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - copytrader-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Frontend Development Server
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      - "5173:5173"
    volumes:
      - ./src:/app/src
      - ./public:/app/public
    environment:
      - NODE_ENV=development
    networks:
      - copytrader-network
    restart: unless-stopped

volumes:
  redis-data:
  postgres-data:
  prometheus-data:
  grafana-data:

networks:
  copytrader-network:
    driver: bridge
